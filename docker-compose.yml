volumes:
  postgres_data:
  elasticsearch_data:
  static_volume:
  media_volume:

  # scylla_data:

services:
  django_web:
    container_name: projectile_web
    build:
      context: .
      dockerfile: docker/projectile/Dockerfile
    volumes:
      # in prod code will be baked into the image, not mounted
      # mount is only for development purposes
      - .:/app

      # named volumes for static and media files
      - static_volume:/app/projectile/staticfiles
      - media_volume:/app/projectile/mediafiles
    working_dir: /app/projectile

    env_file:
      - .env
    user: "${UID}:${GID}"
    depends_on:
      db: 
      #'docker compose down -v' and then 'up' again causes race conditions and django fails to connect to db
      # during the first 'make up' command so to avoid that we add healthchecks, to make sure services are up before starting django
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
  db:
    container_name: projectile_db
    image: postgres:15
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  # pgbouncer:
  #   container_name: projectile_pgbouncer
  #   image: edoburu/pgbouncer:latest
  #   ports:
  #     - "6432:6432"
  #   volumes:
  #     - ./db/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
  #     - ./db/userlist.txt:/etc/pgbouncer/userlist.txt:ro
  #   depends_on:
  #     - db

  redis:
    container_name: projectile_redis
    image: redis:7
    ports:
      - "6379:6379"

  elasticsearch:
    container_name: projectile_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    command: > # to run ES in the foreground and log to stdout
      bash -c "elasticsearch > /usr/share/elasticsearch/logs/elastic.log 2>&1"

    environment:
      - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE}
      - xpack.security.enabled=${ELASTICSEARCH_SECURITY_ENABLED}
      - bootstrap.memory_lock=${ELASTICSEARCH_MEMORY_LOCK}
      - ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # chat_service:
  #   container_name: projectile_chat_service
  #   build:
  #     context: .
  #     dockerfile: docker/chat_service/Dockerfile
  #   volumes:
  #     - ./chat_service:/app
  #   working_dir: /app
  #   command: uvicorn main:app --host 0.0.0.0 --port 9000 --reload
  #   ports:
  #     - "9000:9000"
  #   env_file:
  #     - ./chat_service/.env
  #   environment:
  #     - PYTHONPATH=/app
  #   depends_on:
  #     - db
      # - scylla

  # scylla:
  #   container_name: projectile_scylla
  #   image: scylladb/scylla:5.4
  #   ports:
  #     - "9042:9042"   # native CQL port
  #     - "10000:10000" # REST API (optional)
  #   volumes:
  #     - scylla_data:/var/lib/scylla
  #   environment:
  #     SCYLLA_CLUSTER_NAME: "projectile_cluster"

  nginx:
    container_name: projectile_nginx
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/staticfiles:ro

    depends_on:
      - django_web
      # - chat_service
    restart: unless-stopped

